// Code generated by MockGen. DO NOT EDIT.
// Source: ./usecase/saveproteinevent.go

// Package usecase is a generated GoMock package.
package usecase

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
	time "time"
)

// MockProteinEventSaver is a mock of ProteinEventSaver interface
type MockProteinEventSaver struct {
	ctrl     *gomock.Controller
	recorder *MockProteinEventSaverMockRecorder
}

// MockProteinEventSaverMockRecorder is the mock recorder for MockProteinEventSaver
type MockProteinEventSaverMockRecorder struct {
	mock *MockProteinEventSaver
}

// NewMockProteinEventSaver creates a new mock instance
func NewMockProteinEventSaver(ctrl *gomock.Controller) *MockProteinEventSaver {
	mock := &MockProteinEventSaver{ctrl: ctrl}
	mock.recorder = &MockProteinEventSaverMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockProteinEventSaver) EXPECT() *MockProteinEventSaverMockRecorder {
	return m.recorder
}

// SaveTimeToDrink mocks base method
func (m *MockProteinEventSaver) SaveTimeToDrink(ctx context.Context, userId string, timeToDrink time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveTimeToDrink", ctx, userId, timeToDrink)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveTimeToDrink indicates an expected call of SaveTimeToDrink
func (mr *MockProteinEventSaverMockRecorder) SaveTimeToDrink(ctx, userId, timeToDrink interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveTimeToDrink", reflect.TypeOf((*MockProteinEventSaver)(nil).SaveTimeToDrink), ctx, userId, timeToDrink)
}

// SaveIntervalSec mocks base method
func (m *MockProteinEventSaver) SaveIntervalSec(ctx context.Context, userId string, minutes time.Duration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveIntervalSec", ctx, userId, minutes)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveIntervalSec indicates an expected call of SaveIntervalSec
func (mr *MockProteinEventSaverMockRecorder) SaveIntervalSec(ctx, userId, minutes interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveIntervalSec", reflect.TypeOf((*MockProteinEventSaver)(nil).SaveIntervalSec), ctx, userId, minutes)
}
